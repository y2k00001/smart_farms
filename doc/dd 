//用于轻量化部署的jenkins 流水线
def createDateTime() {
    // 定义一个版本号作为当次构建的版本，输出结果 20191210175842_69
    return new Date().format('yyyyMMddHHmmss')
}

pipeline {
    agent any // 指定所有节点可以构建
    environment {
        JOB_DESCRIPTION = "Rich-Access通用版本-UAT环境"
        BOT_KEY="0"
        _dateTime = createDateTime()
    }

    options { // 执行选项
        buildDiscarder(logRotator(numToKeepStr: '1'))   // 保存历史构建记录的数量
        disableConcurrentBuilds() // 不允许并发构建
        timeout(time: 1, unit: 'HOURS') // 构建超时时间最多1个小时
    }

    parameters {
        gitParameter name: 'BRANCH_TAG',
                branchFilter: 'origin/(.*)',
                quickFilterEnabled: false,
                selectedValue: 'DEFAULT',
                sortMode: 'NONE',
                tagFilter: '*',
                type: 'PT_BRANCH_TAG',
                defaultValue: 'FULL',
                useRepository: 'https://coding.runjian.com:12001/hc_standard/richaccesssystem.git'
    }


    tools {
        maven 'maven3.6.3' // 使用maven
        git 'Default'
    }

    stages { // 构建阶段
        stage('Pre-Build') { // 预构建阶段
            steps {

                // 获取构建人信息，需要装build user vars 插件
                wrap([$class: 'BuildUser']) {
                    script {
                        BUILD_USER = "${env.BUILD_USER}"
                    }
                }
                // 发送机器人消息
                sh "curl -X POST https://oapi.dingtalk.com/robot/send?access_token=ae8f68883d4379be71d5775ca2ba44f8f2f9f732ae553b0fabe673962a66a55e -H 'Content-Type: application/json' \
                    -d '{\"msgtype\": \"text\",\"text\": {\"content\": \"【Rich-Access通用版本-UAT环境】开始构建，构建方式：Full. 执行人：${BUILD_USER}\"}}'"
                checkout([$class: 'GitSCM', gitTool: 'Default',branches: [[name: "${params.BRANCH_TAG}"]], extensions: [], userRemoteConfigs: [[credentialsId: 'guoqing-gitlab', url: 'https://coding.runjian.com:12001/hc_standard/richaccesssystem.git']]])

            }
        }

        stage('Build') { // 构建阶段
            steps {

                sh "mvn clean package -Dmaven.test.skip=true "
                // }

            }

            post {
                // 构建成功后，发送jar包到对应服务器，并重启服务
                success {

									// 将构建后的文件全量发送，全量部署.
									sshPublisher(
											publishers:
													[
															// 发送到测试机
															sshPublisherDesc(
																	configName: 'huawei-ecs9352',
																	transfers:
																			[
																					//备份旧文件，清空传输目录
																					sshTransfer(
																							cleanRemote: false,
																							excludes: '',
																							execCommand: 'cd /home/projects/rich_Access/deploy_work/cmd && \
														 ./bakup.sh',
																							execTimeout: 600000,
																							flatten: false,
																							makeEmptyDirs: false,
																							noDefaultExcludes: false,
																							patternSeparator: '[, ]+',
																							remoteDirectory: 'deploy_work/cmd',
																							remoteDirectorySDF: false,
																							removePrefix: '',
																							sourceFiles: ''
																					),

																					//传输新文件
																					sshTransfer(
																							cleanRemote: false,
																							excludes: '',
																							execCommand: 'echo \'Send file ...\'',
																							execTimeout: 600000,
																							flatten: false,
																							makeEmptyDirs: false,
																							noDefaultExcludes: false,
																							patternSeparator: '[, ]+',
																							remoteDirectory: 'rich_Access/deploy_work/builded',
																							remoteDirectorySDF: false,
																							removePrefix: '',
																							sourceFiles: 'target/*.zip'
																					),

																					// 停止服务，删除旧文件，拷贝新文件，启动服务
																					sshTransfer(
																							cleanRemote: false,
																							excludes: '',
																							execCommand: 'cd /home/projects/rich_Access/deploy_work/cmd && \
														./stopall.sh && ./clean.sh && ./install.sh && cd /home/projects/rich_Access/deploy_work/cmd && ./startall.sh ',
																							execTimeout: 600000,
																							flatten: false,
																							makeEmptyDirs: false,
																							noDefaultExcludes: false,
																							patternSeparator: '[, ]+',
																							remoteDirectory: 'deploy_work/cmd',
																							remoteDirectorySDF: false,
																							removePrefix: '',
																							sourceFiles: ''
																					)
																			],
																	usePromotionTimestamp: false,
																	useWorkspaceInPromotion: false,
																	verbose: false
															)
													]
									)

                }
            }
        }
    }

    post {
        always {
            sh "curl -X POST https://oapi.dingtalk.com/robot/send?access_token=ae8f68883d4379be71d5775ca2ba44f8f2f9f732ae553b0fabe673962a66a55e -H 'Content-Type: application/json' \
                 -d '{\"msgtype\": \"text\",\"text\": {\"content\": \"【Rich-Access通用版本-UAT环境】构建完成！构建结果:${currentBuild.currentResult} 构建详情请见邮件\"}}'"
            // One or more steps need to be included within each condition's block.
            // 发送邮件 现在邮件好像连不上了，先注释...
            //emailext(
            //        body: '$DEFAULT_CONTENT',
            //        subject: '$DEFAULT_SUBJECT',
            //        from: '',
            //		to: '95909@runjian.com'
            //        //to: '96295@runjian.com,95909@runjian.com,95553@runjian.com'
            //    )
        }
    }
}
